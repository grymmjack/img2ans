''
' QB64_GJ_LIB
' GRYMMJACK'S BOUNDING BOX OBJECT
'
' A bounding box simply is a box with some styles, and it can be resized.
'
' @author Rick Christy <grymmjack@gmail.com>
'
' @depends QB64_GJ_LIB/_GJ_LIB_COMMON.BI
' @depends QB64_GJ_LIB/_GJ_LIB_COMMON.BM
' @depends BOUNDING_BOX.BI
'
$INCLUDEONCE


''
' Draw the bounding box
' @param __BOUNDING_BOX bb bounding box to target
' @param LONG dest_image destination image to draw to
' @param INTEGER x position
' @param INTEGER y position
' @param INTEGER w width
' @param INTEGER h height
'
SUB BBOX_draw(bb AS __BOUNDING_BOX, dest_image&, x%, y%, w%, h%)
    bb.canvas = dest_image&
    bb.pos.x  = x%
    bb.pos.y  = y%
    bb.w      = w%
    bb.h      = h%
    CALL BBOX_render(bb)
END SUB


''
' Renders the bounding box (called when visible changes occur)
'
SUB BBOX_render(bb AS __BOUNDING_BOX)
    bb.status.ready = FALSE
    SELECT CASE bb.style$
        CASE "idle"
            BBOX_decorate bb, _
                bb.styles.idle.border.fg, _
                bb.styles.idle.border.w, _
                bb.styles.idle.border.pattern 
        CASE "over"
            BBOX_decorate bb, _
                bb.styles.over.border.fg, _
                bb.styles.over.border.w, _
                bb.styles.over.border.pattern 
        CASE "selected"
            BBOX_decorate bb, _
                bb.styles.selected.border.fg, _
                bb.styles.selected.border.w, _
                bb.styles.selected.border.pattern 
        CASE "resizing"
            BBOX_decorate bb, _
                bb.styles.resizing.border.fg, _
                bb.styles.resizing.border.w, _
                bb.styles.resizing.border.pattern 
        CASE "moving"
            BBOX_decorate bb, _
                bb.styles.moving.border.fg, _
                bb.styles.moving.border.w, _
                bb.styles.moving.border.pattern 
    END SELECT
    bb.status.ready = TRUE
END SUB


''
' Decorate the bounding box
' @param __BOUNDING_BOX bb bounding box to decorate
' @param _UNSIGNED LONG fg foreground color of the box border
' @param INTEGER w width of the bounding box border
' @param LONG pattern to use for border line
'
SUB BBOX_decorate(bb AS __BOUNDING_BOX, fg~&, w%, pattern&)
    DIM AS INTEGER i
    DIM AS LONG old_dest : old_dest = _DEST
    _DEST bb.canvas
    'clear
    FOR i% = 0 TO w%
        LINE (bb.pos.x+i%, bb.pos.y+i%)-(bb.pos.x+bb.w-i%-1, bb.pos.y+bb.h-i%-1), _RGB32(0, 0, 0), B
    NEXT i%
    'decorate
    FOR i% = 0 TO w%
        LINE (bb.pos.x+i%, bb.pos.y+i%)-(bb.pos.x+bb.w-i%-1, bb.pos.y+bb.h-i%-1), fg~&, B, pattern&
    NEXT i%
    _DEST old_dest
END SUB


''
' Set the bounding boxes style state
' @param __BOUNDING_BOX bb bounding box to target
' @param STRING style_state ("idle", "over", "selected", "resizing", "moving")
'
SUB BBOX_set_style_state(bb AS __BOUNDING_BOX, style_state$)
    SELECT CASE style_state$
        CASE "idle"
            bb.style$ = style_state$
        CASE "over"
            bb.style$ = style_state$
        CASE "selected"
            bb.style$ = style_state$
        CASE "resizing"
            bb.style$ = style_state$
        CASE "moving"
            bb.style$ = style_state$
    END SELECT
    CALL BBOX_render(bb)
END SUB


''
' Set the bounding box resizing status
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER state% (bool) TRUE is resizing, FALSE not resizing
' @param STRING edge used to resize ("top", "bot", "left", "right")
'
SUB BBOX_set_resizing(bb AS __BOUNDING_BOX, state%, edge$)
    bb.status.resizing = state%
    IF state% = TRUE THEN
        CALL BBOX_set_style_state(bb, "resizing")
    END IF
    SELECT CASE edge$
        CASE "top": 
            bb.status.resizing_top = state%
        CASE "bot":
            bb.status.resizing_bot = state%
        CASE "left":
            bb.status.resizing_left = state%
        CASE "right":
            bb.status.resizing_right = state%
    END SELECT
    CALL BBOX_render(bb)
END SUB


''
' Set the bounding box moving status
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER state% (bool) TRUE is moving, FALSE not moving
' @param STRING edge used to resize ("up", "down", "left", "right")
'
SUB BBOX_set_moving(bb AS __BOUNDING_BOX, state%, edge$)
    bb.status.moving = state%
    IF state% = TRUE THEN
        CALL BBOX_set_style_state(bb, "moving")
    END IF
    SELECT CASE edge$
        CASE "top": 
            bb.status.moving_up = state%
        CASE "bot":
            bb.status.moving_down = state%
        CASE "left":
            bb.status.moving_left = state%
        CASE "right":
            bb.status.moving_right = state%
    END SELECT
    CALL BBOX_render(bb)
END SUB


''
' Select the bounding box
' @param __BOUNDING_BOX bb bounding box to target
'
SUB BBOX_select(bb AS __BOUNDING_BOX)
    CALL BBOX_set_style_state(bb, "selected")
    CALL BBOX_render(bb)
END SUB


''
' Deselect the bounding box
' @param __BOUNDING_BOX bb bounding box to target
'
SUB BBOX_deselect(bb AS __BOUNDING_BOX)
    CALL BBOX_set_style_state(bb, "idle")
    CALL BBOX_render(bb)
END SUB


''
' Set the bounding box visibility
' @param __BOUNDING_BOX bb bounding box to target
' @param _BYTE is_visible (bool) TRUE = shown, FALSE = hidden
'
SUB BBOX_set_visibility(bb AS __BOUNDING_BOX, is_visible%%)
    bb.status.visible = is_visible%%
    CALL BBOX_render(bb)
END SUB


''
' Set the bounding box position
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER x position
' @param INTEGER y position
'
SUB BBOX_set_pos(bb AS __BOUNDING_BOX, x%, y%)
    bb.pos.x% = x%
    bb.pos.y% = y%
    CALL BBOX_render(bb)
END SUB


''
' Set the bounding box width and height
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER w width
' @param INTEGER h height
'
SUB BBOX_set_size(bb AS __BOUNDING_BOX, w%, h%)
    bb.w% = w%
    bb.h% = h%
    CALL BBOX_render(bb)
END SUB


''
' Hide the bounding box
' @param __BOUNDING_BOX bb bounding box to target
'
SUB BBOX_hide(bb AS __BOUNDING_BOX)
    CALL BBOX_set_visibility(bb, FALSE)
END SUB


''
' Show the bounding box
' @param __BOUNDING_BOX bb bounding box to target
'
SUB BBOX_show(bb AS __BOUNDING_BOX)
    CALL BBOX_set_visibility(bb, TRUE)
END SUB


''
' Resize the bounding box from the left edge
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER amount to resize by (positive number for grow, neg for shrink)
'
SUB BBOX_resize_left(bb AS __BOUNDING_BOX, amount%)
    CALL BBOX_set_style_state(bb, "resizing")
    CALL BBOX_set_resizing(bb, TRUE, "left")
    ' do resize
    CALL BBOX_render(bb)
END SUB


''
' Resize the bounding box from the right edge
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER amount to resize by (positive number for grow, neg for shrink)
'
SUB BBOX_resize_right(bb AS __BOUNDING_BOX, amount%)
    CALL BBOX_set_style_state(bb, "resizing")
    CALL BBOX_set_resizing(bb, TRUE, "right")
    ' do resize
    CALL BBOX_render(bb)
END SUB


''
' Resize the bounding box from the top edge
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER amount to resize by (positive number for grow, neg for shrink)
'
SUB BBOX_resize_top(bb AS __BOUNDING_BOX, amount%)
    CALL BBOX_set_style_state(bb, "resizing")
    CALL BBOX_set_resizing(bb, TRUE, "top")
    ' do resize
    CALL BBOX_render(bb)
END SUB


''
' Resize the bounding box from the bottom edge
' @param __BOUNDING_BOX bb bounding box to target
' @param INTEGER amount to resize by (positive number for grow, neg for shrink)
'
SUB BBOX_resize_bot(bb AS __BOUNDING_BOX, amount%)
    CALL BBOX_set_style_state(bb, "resizing")
    CALL BBOX_set_resizing(bb, TRUE, "bot")
    ' do resize
    CALL BBOX_render(bb)
END SUB


''
' Dumps a bounding box object
'
' @param __BOUNDING_BOX bb bounding box to dump
' @param STRING label$ to give the dump block
' @return STRING dump block
'
FUNCTION BBOX_dump$(bb AS __BOUNDING_BOX, label$)
    DIM AS STRING r, t1, t2
    t1$ = STRING$(4, " ") : t2$ = t1$ + t1$
    r$ = GJ_LIB_NL$ + "BBOX " + label$ + ": {" + GJ_LIB_NL$
    r$ = r$ + t1$ + ".w: " + BBOX_n$(bb.w, TRUE)
    r$ = r$ + t1$ + ".h: " + BBOX_n$(bb.h, TRUE)
    r$ = r$ + t1$ + ".pos.x: " + BBOX_n$(bb.pos.x, TRUE)
    r$ = r$ + t1$ + ".pos.y: " + BBOX_n$(bb.pos.y, TRUE)
    r$ = r$ + t1$ + ".style: " + bb.style$ + GJ_LIB_NL$
    r$ = r$ + t1$ + "status: {" + GJ_LIB_NL$
    r$ = r$ + t2$ + ".ready: " + BBOX_n$(bb.status.ready, TRUE)
    r$ = r$ + t2$ + ".visible: " + BBOX_n$(bb.status.visible, TRUE)
    r$ = r$ + t2$ + ".selected: " + BBOX_n$(bb.status.selected, TRUE)
    r$ = r$ + t2$ + ".resizing: " + BBOX_n$(bb.status.resizing, TRUE)
    r$ = r$ + t2$ + ".resizing_left: " + BBOX_n$(bb.status.resizing_left, TRUE)
    r$ = r$ + t2$ + ".resizing_right: " + BBOX_n$(bb.status.resizing_right, TRUE)
    r$ = r$ + t2$ + ".resizing_top: " + BBOX_n$(bb.status.resizing_top, TRUE)
    r$ = r$ + t2$ + ".resizing_bot: " + BBOX_n$(bb.status.resizing_bot, TRUE)
    r$ = r$ + t2$ + ".moving: " + BBOX_n$(bb.status.moving, TRUE)
    r$ = r$ + t2$ + ".moving_left: " + BBOX_n$(bb.status.moving_left, TRUE)
    r$ = r$ + t2$ + ".moving_right: " + BBOX_n$(bb.status.moving_right, TRUE)
    r$ = r$ + t2$ + ".moving_top: " + BBOX_n$(bb.status.moving_up, TRUE)
    r$ = r$ + t2$ + ".moving_bot: " + BBOX_n$(bb.status.moving_down, TRUE)
    r$ = r$ + t1$ + "}" + GJ_LIB_NL$
    r$ = r$ + "}"
    BBOX_dump$ = r$
END FUNCTION


''
' String helper for trimming numbers
' @param INTEGER ANY non float
' @param INTEGER new_line append?
' @return STRING trimmed number with or without newline
'
FUNCTION BBOX_n$(value, new_line)
    DIM r AS STRING
    r$ = _TRIM$(STR$(value))
    IF new_line THEN r$ = r$ + GJ_LIB_NL$
    BBOX_n$ = r$
END FUNCTION


''
' Dumps a bounding box style object
'
' @param __BOUNDING_BOX bb bounding box to dump
' @param STRING label$ to give the dump block
' @param STRING style$ bounding box style to dump
' @return STRING dump block
'
FUNCTION BBOX_dump_style$(bb AS __BOUNDING_BOX, label$, style$)
    DIM AS STRING r, t1, t2
    DIM s AS __STYLE
    SELECT CASE style$
        CASE "idle"
            s = bb.styles.idle
        CASE "over"
            s = bb.styles.over
        CASE "selected"
            s = bb.styles.selected
        CASE "resizing"
            s = bb.styles.resizing
        CASE "moving"
            s = bb.styles.moving
    END SELECT
    t1$ = STRING$(4, " "): t2$ = t1$ + t1$
    r$ = GJ_LIB_NL$ + "BBOX.style." + style$ + " " + label$ + ": {" + GJ_LIB_NL$
    r$ = r$ + t1$ + ".fg: " + BBOX_n$(s.fg, TRUE)
    r$ = r$ + t1$ + ".bg: " + BBOX_n$(s.bg, TRUE)
    r$ = r$ + t1$ + ".border: { "+ GJ_LIB_NL$
    r$ = r$ + t2$ + ".fg: " + BBOX_n$(s.border.fg, TRUE)
    r$ = r$ + t2$ + ".w: " + BBOX_n$(s.border.w, TRUE)
    r$ = r$ + t2$ + ".pattern: " + BBOX_n$(s.border.pattern, TRUE)
    r$ = r$ + t1$ + "}"+ GJ_LIB_NL$
    r$ = r$ + "}"
    BBOX_dump_style$ = r$
END FUNCTION
